Map.centerObject(roi,8)
Map.addLayer(roi,{color:'red'},'roi',false)
Map.addLayer(salinesoil,{},'salinesoil',false)

// 处理亮温波段数据并导出
function rmL8Cloud(image) {
  var cloudShadowBitMask = (1 << 3);
  var cloudsBitMask = (1 << 5);
  var qa = image.select('QA_PIXEL');
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                 .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return image.updateMask(mask)//.divide(10000);
}

function radiometricCalibration(image) {
    // 获取B10波段的数字数值（DN）
    var dn_b10 = image.select('B10');
    
    // 辐射定标系数（增益和偏置系数）
    var M_L_B10 = 0.0003342;  // 增益系数
    var A_L_B10 = 0.1;  // 偏置系数
    
    // 计算辐射亮度
    var radiance_b10 = dn_b10.multiply(M_L_B10).add(A_L_B10).toFloat();
    
    // K1 和 K2 系数
    var K1 = ee.Image(774.89);
    var K2 = ee.Image(1321.08);
    
    // 计算亮温（温度）
    var fenzi = K2;
    var fenmu = K1.divide(radiance_b10).add(1).log();
    var temperature_b10 = fenzi.divide(fenmu);
    
    // 确保 temperature_b10 是影像对象
    var temperature_b10_image = temperature_b10.multiply(10);
    
    // 返回更新后的影像，包含温度波段
    return image.addBands(temperature_b10_image.rename('B10_temperature'));
}

var datasetB101 = ee.ImageCollection("LANDSAT/LC08/C02/T1")
                  .filterDate('2017-9-20', '2017-11-30') //筛选日期设定
                  .filter(ee.Filter.lte('CLOUD_COVER',50))
                  .filterBounds(roi)  // roi qu yu 
                  .map(rmL8Cloud); //掩膜操作

var datasetB102 = ee.ImageCollection("LANDSAT/LC08/C02/T1")
                  .filterDate('2016-9-25', '2016-10-30') //筛选日期设定
                  .filter(ee.Filter.lte('CLOUD_COVER',50))
                  .filterBounds(roi)  // roi qu yu 
                  .map(rmL8Cloud); //掩膜操作

var datasetB10=datasetB101.merge(datasetB102)

// 对影像集合中的每一幅影像进行辐射定标和反射率转换
var dataset_with_reflectance = datasetB10.map(radiometricCalibration) 

var b10_band = dataset_with_reflectance.select('B10_temperature').mean().clip(roi).updateMask(salinesoil)


Map.addLayer(b10_band,{"min": 2500, "max": 3200, "palette": ['blue', 'green', 'yellow', 'red']},"B10 Refletance",false)

Export.image.toDrive({
  crs: 'EPSG:4326',
  image: b10_band,
  description: "imgB10",
  scale:100,
  region:roi,
  folder:'2017inversion',
  maxPixels:1e13
})

// 处理指数波段数据并导出
function maskL8sr(image) {
  // Bit 0 - Fill
  // Bit 1 - Dilated Cloud
  // Bit 2 - Cirrus
  // Bit 3 - Cloud
  // Bit 4 - Cloud Shadow
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  // Apply the scaling factors to the appropriate bands.
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);

  // Replace the original bands with the scaled ones and apply the masks.
  return image.addBands(opticalBands, null, true)
      .addBands(thermalBands, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask).multiply(10000);
}


var datasetindex1 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
                  .filterDate('2017-9-20', '2017-11-30') //筛选日期设定
                  .filter(ee.Filter.lte('CLOUD_COVER',50))
                  .filterBounds(roi)  // roi qu yu 
                  .map(maskL8sr); //掩膜操作

var datasetindex2 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
                  .filterDate('2016-9-25', '2016-10-30') //筛选日期设定
                  .filter(ee.Filter.lte('CLOUD_COVER',50))
                  .filterBounds(roi)  // roi qu yu 
                  .map(maskL8sr); //掩膜操作

var datasetindex=datasetindex1.merge(datasetindex2)
// print('datasetindex',datasetindex)

// mean 
var imag=datasetindex.mean().clip(roi).updateMask(salinesoil)//取均值，裁剪

var bands=['SR_B2','SR_B3','SR_B4','SR_B5'];
var targetimg = imag.select(bands)//.median().clip(roi);
// print(targetimg,'targetimg');

var visualization543 = {
  min: 0.0,
  max: 5000.0,
  bands: ['SR_B5', 'SR_B4', 'SR_B3'],
};

Map.addLayer(targetimg,visualization543,"targetimg")

var SI_T = function(img){
  var res = img.expression(
    "b4/b5",
    {
      "b4":img.select('SR_B4'),
      "b5":img.select('SR_B5')
    }
    )
    return res;
};

var imgSI_T = SI_T(targetimg);

var PDI = function(img){
  var res = img.expression(
    "(b4 + 0.8*b5)*(b4 + 0.8*b5)/(0.8*0.8 + 1)",
    {
      "b4":img.select('SR_B4'),
      "b5":img.select('SR_B5')
    }
    )
    res = res.sqrt();
    return res;
};

var imgPDI = PDI(targetimg);

//imgPDI
Export.image.toDrive({
  crs: 'EPSG:4326',
  image: imgPDI,
  description: "imgPDI",
  scale:100,
  region:roi,
  folder:'2017inversion',
  maxPixels:1e13
})
//imgSI_T
Export.image.toDrive({
  crs: 'EPSG:4326',
  image: imgSI_T,
  description: "imgSI_T",
  scale:100,
  region:roi,
  folder:'2017inversion',
  maxPixels:1e13
})



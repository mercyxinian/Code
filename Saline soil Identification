Map.centerObject(roi,8)
Map.addLayer(roi,false,'roi');


function maskL8sr(image) {
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);

  return image.addBands(opticalBands, null, true)
      .addBands(thermalBands, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask);
}


var Lan8_20201 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
              
                  .filterBounds(roi)
                  .filterDate('2020-3-1','2020-6-20')
                  .filter(ee.Filter.lt('CLOUD_COVER',40))
                  .map(maskL8sr)


var Lan8_20202 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
              
                  .filterBounds(roi)
                  .filterDate('2020-10-1','2020-11-20')
                  .filter(ee.Filter.lt('CLOUD_COVER',40))
                  .map(maskL8sr)

var Lan8_2020=Lan8_20201.merge(Lan8_20202)
                 
var image_L8 = Lan8_2020.mean().clip(roi)

var L8_B2= image_L8.select('SR_B2').rename('L8_B2')
var L8_B3= image_L8.select('SR_B3').rename('L8_B3')
var L8_B4= image_L8.select('SR_B4').rename('L8_B4')
var L8_B5= image_L8.select('SR_B5').rename('L8_B5')
var L8_B6= image_L8.select('SR_B6').rename('L8_B6')
var L8_B7= image_L8.select('SR_B7').rename('L8_B7')
var image_L8_rename =image_L8.addBands(L8_B2).
                              addBands(L8_B3).
                              addBands(L8_B4).
                              addBands(L8_B5).
                              addBands(L8_B6).
                              addBands(L8_B7).
                              select('L8_B2','L8_B3','L8_B4','L8_B5','L8_B6','L8_B7')
print('image_L8_rename',image_L8_rename)
var image_reproj=image_L8_rename.reproject('EPSG:4326',null,100)

print('Lan8_2020',Lan8_2020)
var visParams = {
  bands: ['L8_B5', 'L8_B4', 'L8_B3'],
  min: 0,
  max: 0.5,
  gamma: 1.4,
};


var bands1 = ['L8_B2']
var bands2 = ['L8_B3']
var bands3 = ['L8_B4']
var bands4 = ['L8_B5']
var bands5 = ['L8_B6']
var bands6 = ['L8_B7']

var bands=['L8_B2','L8_B3','L8_B4','L8_B5','L8_B6','L8_B7']
var classProperty = 'landcover';

var Lan_fusion1 =image_reproj.select(bands1) ;
var Lan_fusion2 =image_reproj.select(bands2) ;
var Lan_fusion3 =image_reproj.select(bands3) ;
var Lan_fusion4 =image_reproj.select(bands4) ;
var Lan_fusion5 =image_reproj.select(bands5) ;
var Lan_fusion6 =image_reproj.select(bands6) ;

function normalization(image,region,scale){
var mean_std = image.reduceRegion({
  reducer: ee.Reducer.mean()
            .combine(ee.Reducer.stdDev(),null, true),
  geometry: region,
  scale: scale,
  maxPixels: 10e9,
}); 
var unitScale = ee.ImageCollection.fromImages(
  image.bandNames().map(function(name){
    name = ee.String(name);
    var band = image.select(name);
    var mean=ee.Number(mean_std.get(name.cat('_mean')));
    var std=ee.Number(mean_std.get(name.cat('_stdDev')));
    var max=mean.add(std.multiply(3))
    var min=mean.subtract(std.multiply(3))
    var band1=ee.Image(min).multiply(band.lt(min)).add(ee.Image(max).multiply(band.gt(max)))
                        .add(band.multiply(ee.Image(1).subtract(band.lt(min)).subtract(band.gt(max))))
    var result_band=band1.subtract(min).divide(max.subtract(min));
    return result_band;
})).toBands().rename(image.bandNames());
  return unitScale;
}

var fusion_norm1=normalization(Lan_fusion1,roi,100)                
var fusion_norm2=normalization(Lan_fusion2,roi,100)
var fusion_norm3=normalization(Lan_fusion3,roi,100)
var fusion_norm4=normalization(Lan_fusion4,roi,100)
var fusion_norm5=normalization(Lan_fusion5,roi,100)
var fusion_norm6=normalization(Lan_fusion6,roi,100)


var Lan_fusion=fusion_norm1.addBands(fusion_norm2).addBands(fusion_norm3).addBands(fusion_norm4).addBands(fusion_norm5).addBands(fusion_norm6).select('L8_B2','L8_B3','L8_B4','L8_B5','L8_B6','L8_B7')


var Lan5_dataset = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
                  .filterBounds(roi)
                  .filterDate('2017-5-1', '2017-10-30')
                  .filter(ee.Filter.lt('CLOUD_COVER',50))
                  .map(maskL8sr);
var image_lan5= Lan5_dataset.mean().select('SR_B2','SR_B3','SR_B4','SR_B5','SR_B6','SR_B7').clip(roi) 
print('image_lan5',image_lan5)


var L8_L5_B2=image_lan5.select('SR_B2').rename("L8_B2")
var L8_L5_B3=image_lan5.select('SR_B3').rename("L8_B3")  
var L8_L5_B4=image_lan5.select('SR_B4').rename("L8_B4")  
var L8_L5_B5=image_lan5.select('SR_B5').rename("L8_B5")  
var L8_L5_B6=image_lan5.select('SR_B6').rename("L8_B6")  
var L8_L5_B7=image_lan5.select('SR_B7').rename("L8_B7")   

var image_l5_rename=image_lan5.addBands(L8_L5_B2).
                              addBands(L8_L5_B3).
                              addBands(L8_L5_B4).
                              addBands(L8_L5_B5).
                              addBands(L8_L5_B6).
                              addBands(L8_L5_B7).
                              select('L8_B2','L8_B3','L8_B4','L8_B5','L8_B6','L8_B7')


var image_reproj_l5=image_l5_rename.reproject('EPSG:4326',null,100)

var Lan_fusion_l5_1 =image_reproj_l5.clip(roi).select(bands1) ;
var Lan_fusion_l5_2 =image_reproj_l5.clip(roi).select(bands2) ;
var Lan_fusion_l5_3 =image_reproj_l5.clip(roi).select(bands3) ;
var Lan_fusion_l5_4 =image_reproj_l5.clip(roi).select(bands4) ;
var Lan_fusion_l5_5 =image_reproj_l5.clip(roi).select(bands5) ;
var Lan_fusion_l5_6 =image_reproj_l5.clip(roi).select(bands6) ;

var fusion_norm_l5_1=normalization(Lan_fusion_l5_1,roi,100)                
var fusion_norm_l5_2=normalization(Lan_fusion_l5_2,roi,100)
var fusion_norm_l5_3=normalization(Lan_fusion_l5_3,roi,100)
var fusion_norm_l5_4=normalization(Lan_fusion_l5_4,roi,100)
var fusion_norm_l5_5=normalization(Lan_fusion_l5_5,roi,100)
var fusion_norm_l5_6=normalization(Lan_fusion_l5_6,roi,100)



var Lan_fusion_l5=fusion_norm_l5_1.addBands(fusion_norm_l5_2).addBands(fusion_norm_l5_3).addBands(fusion_norm_l5_4).addBands(fusion_norm_l5_5).addBands(fusion_norm_l5_6).     select('L8_B2','L8_B3','L8_B4','L8_B5','L8_B6','L8_B7')            
var visParams1 = {
  bands: ['SR_B5', 'SR_B4', 'SR_B3'],
  min: 0,
  max: 0.5,
  gamma: 1.4,
};
Map.addLayer(image_lan5, visParams1,'image_lan5',false);


var visParams0 = {
  bands: ['L8_B5', 'L8_B4', 'L8_B3'],
  min: 0,
  max: 0.5,
  gamma: 1.4,
};




var sampleData = soil.merge(non_soil);
var sample = Lan_fusion.sampleRegions({ 
  collection: sampleData, 
  properties: [classProperty], 
  scale: 100 ,
  tileScale:16
}); 
var withRandom = sample.randomColumn('random');

var split = 0.7;  
var training = withRandom.filter(ee.Filter.lt('random', split));
var testing = withRandom.filter(ee.Filter.gte('random', split));


var classifierRF = ee.Classifier.smileRandomForest(10).train({
  features: training, 
  classProperty: classProperty, 
  inputProperties: bands 
  
}); 

var classifiedRF_2020 = Lan_fusion.classify(classifierRF); 
var imageVisParam = {min:0, max:2, palette: ["orange", "blue", "green"]}

var test1 = testing.classify(classifierRF);
var confusionMatrix_2020 = test1.errorMatrix(classProperty, 'classification');
print('overall accuracy', confusionMatrix_2020.accuracy());
print('kappa accuracy', confusionMatrix_2020.kappa());

Map.addLayer(Lan_fusion, {min: 0, max: 1, bands: ['L8_B5', 'L8_B4', 'L8_B3']}, 'Lan_fusion',false)
var classifiedRF_2000 = Lan_fusion_l5.classify(classifierRF); 
Map.addLayer(classifiedRF_2000, imageVisParam, "classifiedRF_2000");

Export.image.toDrive({
  crs: 'EPSG:4326',
  image: classifiedRF_2000,
  description: "classifiedRF_2017",
  scale:100,
  region:roi,
  folder:'2017',
  maxPixels:1e13
})


